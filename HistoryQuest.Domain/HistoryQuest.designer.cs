#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HistoryQuest.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HistoryQuest.DataBase")]
	public partial class HistoryQuestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCheckPoint(CheckPoint instance);
    partial void UpdateCheckPoint(CheckPoint instance);
    partial void DeleteCheckPoint(CheckPoint instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertCheckPointsToTry(CheckPointsToTry instance);
    partial void UpdateCheckPointsToTry(CheckPointsToTry instance);
    partial void DeleteCheckPointsToTry(CheckPointsToTry instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertError(Error instance);
    partial void UpdateError(Error instance);
    partial void DeleteError(Error instance);
    partial void InsertFace(Face instance);
    partial void UpdateFace(Face instance);
    partial void DeleteFace(Face instance);
    partial void InsertLike(Like instance);
    partial void UpdateLike(Like instance);
    partial void DeleteLike(Like instance);
    partial void InsertPupilsToTeachersRequest(PupilsToTeachersRequest instance);
    partial void UpdatePupilsToTeachersRequest(PupilsToTeachersRequest instance);
    partial void DeletePupilsToTeachersRequest(PupilsToTeachersRequest instance);
    partial void InsertQuest(Quest instance);
    partial void UpdateQuest(Quest instance);
    partial void DeleteQuest(Quest instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTasksToTry(TasksToTry instance);
    partial void UpdateTasksToTry(TasksToTry instance);
    partial void DeleteTasksToTry(TasksToTry instance);
    partial void InsertTaskType(TaskType instance);
    partial void UpdateTaskType(TaskType instance);
    partial void DeleteTaskType(TaskType instance);
    partial void InsertTeacherRequest(TeacherRequest instance);
    partial void UpdateTeacherRequest(TeacherRequest instance);
    partial void DeleteTeacherRequest(TeacherRequest instance);
    partial void InsertTry(Try instance);
    partial void UpdateTry(Try instance);
    partial void DeleteTry(Try instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFAQ(FAQ instance);
    partial void UpdateFAQ(FAQ instance);
    partial void DeleteFAQ(FAQ instance);
    #endregion
		
		public HistoryQuestDataContext() : 
				base(global::HistoryQuest.Domain.Properties.Settings.Default.HistoryQuest_DataBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryQuestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryQuestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryQuestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HistoryQuestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CheckPoint> CheckPoints
		{
			get
			{
				return this.GetTable<CheckPoint>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<CheckPointsToTry> CheckPointsToTries
		{
			get
			{
				return this.GetTable<CheckPointsToTry>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Error> Errors
		{
			get
			{
				return this.GetTable<Error>();
			}
		}
		
		public System.Data.Linq.Table<Face> Faces
		{
			get
			{
				return this.GetTable<Face>();
			}
		}
		
		public System.Data.Linq.Table<Like> Likes
		{
			get
			{
				return this.GetTable<Like>();
			}
		}
		
		public System.Data.Linq.Table<PupilsToTeachersRequest> PupilsToTeachersRequests
		{
			get
			{
				return this.GetTable<PupilsToTeachersRequest>();
			}
		}
		
		public System.Data.Linq.Table<Quest> Quests
		{
			get
			{
				return this.GetTable<Quest>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TasksToTry> TasksToTries
		{
			get
			{
				return this.GetTable<TasksToTry>();
			}
		}
		
		public System.Data.Linq.Table<TaskType> TaskTypes
		{
			get
			{
				return this.GetTable<TaskType>();
			}
		}
		
		public System.Data.Linq.Table<TeacherRequest> TeacherRequests
		{
			get
			{
				return this.GetTable<TeacherRequest>();
			}
		}
		
		public System.Data.Linq.Table<Try> Tries
		{
			get
			{
				return this.GetTable<Try>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<FAQ> FAQs
		{
			get
			{
				return this.GetTable<FAQ>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CheckPoints")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class CheckPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _QuestGID;
		
		private string _Name;
		
		private string _GeoCoordinates;
		
		private string _Info;
		
		private int _TasksCount;
		
		private System.Nullable<int> _ThresholdScore;
		
		private int _OrderId;
		
		private bool _IsBonus;
		
		private System.Nullable<System.Guid> _ParentGID;
		
		private System.Nullable<System.Guid> _AuthorGID;
		
		private EntitySet<CheckPoint> _CheckPoints;
		
		private EntitySet<CheckPointsToTry> _CheckPointsToTries;
		
		private EntitySet<Like> _Likes;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<CheckPoint> _CheckPoint1;
		
		private EntityRef<Quest> _Quest;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnQuestGIDChanging(System.Guid value);
    partial void OnQuestGIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGeoCoordinatesChanging(string value);
    partial void OnGeoCoordinatesChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnTasksCountChanging(int value);
    partial void OnTasksCountChanged();
    partial void OnThresholdScoreChanging(System.Nullable<int> value);
    partial void OnThresholdScoreChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnIsBonusChanging(bool value);
    partial void OnIsBonusChanged();
    partial void OnParentGIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentGIDChanged();
    partial void OnAuthorGIDChanging(System.Nullable<System.Guid> value);
    partial void OnAuthorGIDChanged();
    #endregion
		
		public CheckPoint()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid QuestGID
		{
			get
			{
				return this._QuestGID;
			}
			set
			{
				if ((this._QuestGID != value))
				{
					if (this._Quest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestGIDChanging(value);
					this.SendPropertyChanging();
					this._QuestGID = value;
					this.SendPropertyChanged("QuestGID");
					this.OnQuestGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeoCoordinates", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string GeoCoordinates
		{
			get
			{
				return this._GeoCoordinates;
			}
			set
			{
				if ((this._GeoCoordinates != value))
				{
					this.OnGeoCoordinatesChanging(value);
					this.SendPropertyChanging();
					this._GeoCoordinates = value;
					this.SendPropertyChanged("GeoCoordinates");
					this.OnGeoCoordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TasksCount", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public int TasksCount
		{
			get
			{
				return this._TasksCount;
			}
			set
			{
				if ((this._TasksCount != value))
				{
					this.OnTasksCountChanging(value);
					this.SendPropertyChanging();
					this._TasksCount = value;
					this.SendPropertyChanged("TasksCount");
					this.OnTasksCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThresholdScore", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<int> ThresholdScore
		{
			get
			{
				return this._ThresholdScore;
			}
			set
			{
				if ((this._ThresholdScore != value))
				{
					this.OnThresholdScoreChanging(value);
					this.SendPropertyChanging();
					this._ThresholdScore = value;
					this.SendPropertyChanged("ThresholdScore");
					this.OnThresholdScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBonus", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public bool IsBonus
		{
			get
			{
				return this._IsBonus;
			}
			set
			{
				if ((this._IsBonus != value))
				{
					this.OnIsBonusChanging(value);
					this.SendPropertyChanging();
					this._IsBonus = value;
					this.SendPropertyChanged("IsBonus");
					this.OnIsBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public System.Nullable<System.Guid> ParentGID
		{
			get
			{
				return this._ParentGID;
			}
			set
			{
				if ((this._ParentGID != value))
				{
					if (this._CheckPoint1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentGIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGID = value;
					this.SendPropertyChanged("ParentGID");
					this.OnParentGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public System.Nullable<System.Guid> AuthorGID
		{
			get
			{
				return this._AuthorGID;
			}
			set
			{
				if ((this._AuthorGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorGIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorGID = value;
					this.SendPropertyChanged("AuthorGID");
					this.OnAuthorGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_CheckPoint", Storage="_CheckPoints", ThisKey="gid", OtherKey="ParentGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<CheckPoint> CheckPoints
		{
			get
			{
				if ((this.serializing 
							&& (this._CheckPoints.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CheckPoints;
			}
			set
			{
				this._CheckPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_CheckPointsToTry", Storage="_CheckPointsToTries", ThisKey="gid", OtherKey="CheckPointGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<CheckPointsToTry> CheckPointsToTries
		{
			get
			{
				if ((this.serializing 
							&& (this._CheckPointsToTries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CheckPointsToTries;
			}
			set
			{
				this._CheckPointsToTries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_Like", Storage="_Likes", ThisKey="gid", OtherKey="CheckPointGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<Like> Likes
		{
			get
			{
				if ((this.serializing 
							&& (this._Likes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Likes;
			}
			set
			{
				this._Likes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_Task", Storage="_Tasks", ThisKey="gid", OtherKey="CheckPointGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_CheckPoint", Storage="_CheckPoint1", ThisKey="ParentGID", OtherKey="gid", IsForeignKey=true)]
		public CheckPoint CheckPoint1
		{
			get
			{
				return this._CheckPoint1.Entity;
			}
			set
			{
				CheckPoint previousValue = this._CheckPoint1.Entity;
				if (((previousValue != value) 
							|| (this._CheckPoint1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckPoint1.Entity = null;
						previousValue.CheckPoints.Remove(this);
					}
					this._CheckPoint1.Entity = value;
					if ((value != null))
					{
						value.CheckPoints.Add(this);
						this._ParentGID = value.gid;
					}
					else
					{
						this._ParentGID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CheckPoint1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_CheckPoint", Storage="_Quest", ThisKey="QuestGID", OtherKey="gid", IsForeignKey=true)]
		public Quest Quest
		{
			get
			{
				return this._Quest.Entity;
			}
			set
			{
				Quest previousValue = this._Quest.Entity;
				if (((previousValue != value) 
							|| (this._Quest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quest.Entity = null;
						previousValue.CheckPoints.Remove(this);
					}
					this._Quest.Entity = value;
					if ((value != null))
					{
						value.CheckPoints.Add(this);
						this._QuestGID = value.gid;
					}
					else
					{
						this._QuestGID = default(System.Guid);
					}
					this.SendPropertyChanged("Quest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CheckPoint", Storage="_User", ThisKey="AuthorGID", OtherKey="gid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CheckPoints.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CheckPoints.Add(this);
						this._AuthorGID = value.gid;
					}
					else
					{
						this._AuthorGID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint1 = this;
		}
		
		private void detach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint1 = null;
		}
		
		private void attach_CheckPointsToTries(CheckPointsToTry entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = this;
		}
		
		private void detach_CheckPointsToTries(CheckPointsToTry entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = null;
		}
		
		private void attach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = this;
		}
		
		private void detach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.CheckPoint = null;
		}
		
		private void Initialize()
		{
			this._CheckPoints = new EntitySet<CheckPoint>(new Action<CheckPoint>(this.attach_CheckPoints), new Action<CheckPoint>(this.detach_CheckPoints));
			this._CheckPointsToTries = new EntitySet<CheckPointsToTry>(new Action<CheckPointsToTry>(this.attach_CheckPointsToTries), new Action<CheckPointsToTry>(this.detach_CheckPointsToTries));
			this._Likes = new EntitySet<Like>(new Action<Like>(this.attach_Likes), new Action<Like>(this.detach_Likes));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._CheckPoint1 = default(EntityRef<CheckPoint>);
			this._Quest = default(EntityRef<Quest>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersInRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _gid;
		
		private System.Guid _UserGID;
		
		private System.Guid _RoleGID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnUserGIDChanging(System.Guid value);
    partial void OnUserGIDChanged();
    partial void OnRoleGIDChanging(System.Guid value);
    partial void OnRoleGIDChanged();
    #endregion
		
		public UsersInRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid UserGID
		{
			get
			{
				return this._UserGID;
			}
			set
			{
				if ((this._UserGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGIDChanging(value);
					this.SendPropertyChanging();
					this._UserGID = value;
					this.SendPropertyChanged("UserGID");
					this.OnUserGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid RoleGID
		{
			get
			{
				return this._RoleGID;
			}
			set
			{
				if ((this._RoleGID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleGIDChanging(value);
					this.SendPropertyChanging();
					this._RoleGID = value;
					this.SendPropertyChanged("RoleGID");
					this.OnRoleGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_Role", ThisKey="RoleGID", OtherKey="gid", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleGID = value.gid;
					}
					else
					{
						this._RoleGID = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_User", ThisKey="UserGID", OtherKey="gid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserGID = value.gid;
					}
					else
					{
						this._UserGID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CheckPointsToTries")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class CheckPointsToTry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _CheckPointGID;
		
		private System.Guid _TryGID;
		
		private bool _IsFailed;
		
		private EntitySet<TasksToTry> _TasksToTries;
		
		private EntityRef<CheckPoint> _CheckPoint;
		
		private EntityRef<Try> _Try;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnCheckPointGIDChanging(System.Guid value);
    partial void OnCheckPointGIDChanged();
    partial void OnTryGIDChanging(System.Guid value);
    partial void OnTryGIDChanged();
    partial void OnIsFailedChanging(bool value);
    partial void OnIsFailedChanged();
    #endregion
		
		public CheckPointsToTry()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckPointGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid CheckPointGID
		{
			get
			{
				return this._CheckPointGID;
			}
			set
			{
				if ((this._CheckPointGID != value))
				{
					if (this._CheckPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckPointGIDChanging(value);
					this.SendPropertyChanging();
					this._CheckPointGID = value;
					this.SendPropertyChanged("CheckPointGID");
					this.OnCheckPointGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TryGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid TryGID
		{
			get
			{
				return this._TryGID;
			}
			set
			{
				if ((this._TryGID != value))
				{
					if (this._Try.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTryGIDChanging(value);
					this.SendPropertyChanging();
					this._TryGID = value;
					this.SendPropertyChanged("TryGID");
					this.OnTryGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFailed", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool IsFailed
		{
			get
			{
				return this._IsFailed;
			}
			set
			{
				if ((this._IsFailed != value))
				{
					this.OnIsFailedChanging(value);
					this.SendPropertyChanging();
					this._IsFailed = value;
					this.SendPropertyChanged("IsFailed");
					this.OnIsFailedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPointsToTry_TasksToTry", Storage="_TasksToTries", ThisKey="gid", OtherKey="CheckPointToTryGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<TasksToTry> TasksToTries
		{
			get
			{
				if ((this.serializing 
							&& (this._TasksToTries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TasksToTries;
			}
			set
			{
				this._TasksToTries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_CheckPointsToTry", Storage="_CheckPoint", ThisKey="CheckPointGID", OtherKey="gid", IsForeignKey=true)]
		public CheckPoint CheckPoint
		{
			get
			{
				return this._CheckPoint.Entity;
			}
			set
			{
				CheckPoint previousValue = this._CheckPoint.Entity;
				if (((previousValue != value) 
							|| (this._CheckPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckPoint.Entity = null;
						previousValue.CheckPointsToTries.Remove(this);
					}
					this._CheckPoint.Entity = value;
					if ((value != null))
					{
						value.CheckPointsToTries.Add(this);
						this._CheckPointGID = value.gid;
					}
					else
					{
						this._CheckPointGID = default(System.Guid);
					}
					this.SendPropertyChanged("CheckPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Try_CheckPointsToTry", Storage="_Try", ThisKey="TryGID", OtherKey="gid", IsForeignKey=true)]
		public Try Try
		{
			get
			{
				return this._Try.Entity;
			}
			set
			{
				Try previousValue = this._Try.Entity;
				if (((previousValue != value) 
							|| (this._Try.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Try.Entity = null;
						previousValue.CheckPointsToTries.Remove(this);
					}
					this._Try.Entity = value;
					if ((value != null))
					{
						value.CheckPointsToTries.Add(this);
						this._TryGID = value.gid;
					}
					else
					{
						this._TryGID = default(System.Guid);
					}
					this.SendPropertyChanged("Try");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TasksToTries(TasksToTry entity)
		{
			this.SendPropertyChanging();
			entity.CheckPointsToTry = this;
		}
		
		private void detach_TasksToTries(TasksToTry entity)
		{
			this.SendPropertyChanging();
			entity.CheckPointsToTry = null;
		}
		
		private void Initialize()
		{
			this._TasksToTries = new EntitySet<TasksToTry>(new Action<TasksToTry>(this.attach_TasksToTries), new Action<TasksToTry>(this.detach_TasksToTries));
			this._CheckPoint = default(EntityRef<CheckPoint>);
			this._Try = default(EntityRef<Try>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _QuestGID;
		
		private string _Text;
		
		private System.DateTime _Date;
		
		private System.Guid _AuthorGID;
		
		private EntityRef<Quest> _Quest;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnQuestGIDChanging(System.Guid value);
    partial void OnQuestGIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAuthorGIDChanging(System.Guid value);
    partial void OnAuthorGIDChanged();
    #endregion
		
		public Comment()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid QuestGID
		{
			get
			{
				return this._QuestGID;
			}
			set
			{
				if ((this._QuestGID != value))
				{
					if (this._Quest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestGIDChanging(value);
					this.SendPropertyChanging();
					this._QuestGID = value;
					this.SendPropertyChanged("QuestGID");
					this.OnQuestGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid AuthorGID
		{
			get
			{
				return this._AuthorGID;
			}
			set
			{
				if ((this._AuthorGID != value))
				{
					this.OnAuthorGIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorGID = value;
					this.SendPropertyChanged("AuthorGID");
					this.OnAuthorGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Comment", Storage="_Quest", ThisKey="QuestGID", OtherKey="gid", IsForeignKey=true)]
		public Quest Quest
		{
			get
			{
				return this._Quest.Entity;
			}
			set
			{
				Quest previousValue = this._Quest.Entity;
				if (((previousValue != value) 
							|| (this._Quest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quest.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Quest.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._QuestGID = value.gid;
					}
					else
					{
						this._QuestGID = default(System.Guid);
					}
					this.SendPropertyChanged("Quest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Quest = default(EntityRef<Quest>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Errors")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Error : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ErrorText;
		
		private string _InnerErrorText;
		
		private System.DateTime _DateTime;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnErrorTextChanging(string value);
    partial void OnErrorTextChanged();
    partial void OnInnerErrorTextChanging(string value);
    partial void OnInnerErrorTextChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Error()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorText", DbType="NVarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string ErrorText
		{
			get
			{
				return this._ErrorText;
			}
			set
			{
				if ((this._ErrorText != value))
				{
					this.OnErrorTextChanging(value);
					this.SendPropertyChanging();
					this._ErrorText = value;
					this.SendPropertyChanged("ErrorText");
					this.OnErrorTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InnerErrorText", DbType="NVarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string InnerErrorText
		{
			get
			{
				return this._InnerErrorText;
			}
			set
			{
				if ((this._InnerErrorText != value))
				{
					this.OnInnerErrorTextChanging(value);
					this.SendPropertyChanging();
					this._InnerErrorText = value;
					this.SendPropertyChanged("InnerErrorText");
					this.OnInnerErrorTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faces")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Face : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private System.Nullable<System.Guid> _TeacherGID;
		
		private string _Info;
		
		private bool _IsTeacher;
		
		private EntitySet<PupilsToTeachersRequest> _PupilsToTeachersRequests;
		
		private EntitySet<PupilsToTeachersRequest> _PupilsToTeachersRequests1;
		
		private EntitySet<User> _Users;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnTeacherGIDChanging(System.Nullable<System.Guid> value);
    partial void OnTeacherGIDChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnIsTeacherChanging(bool value);
    partial void OnIsTeacherChanged();
    #endregion
		
		public Face()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.Guid> TeacherGID
		{
			get
			{
				return this._TeacherGID;
			}
			set
			{
				if ((this._TeacherGID != value))
				{
					this.OnTeacherGIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherGID = value;
					this.SendPropertyChanged("TeacherGID");
					this.OnTeacherGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(500)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTeacher", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public bool IsTeacher
		{
			get
			{
				return this._IsTeacher;
			}
			set
			{
				if ((this._IsTeacher != value))
				{
					this.OnIsTeacherChanging(value);
					this.SendPropertyChanging();
					this._IsTeacher = value;
					this.SendPropertyChanged("IsTeacher");
					this.OnIsTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_PupilsToTeachersRequest", Storage="_PupilsToTeachersRequests", ThisKey="gid", OtherKey="TeacherGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<PupilsToTeachersRequest> PupilsToTeachersRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._PupilsToTeachersRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PupilsToTeachersRequests;
			}
			set
			{
				this._PupilsToTeachersRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_PupilsToTeachersRequest1", Storage="_PupilsToTeachersRequests1", ThisKey="gid", OtherKey="PupilGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<PupilsToTeachersRequest> PupilsToTeachersRequests1
		{
			get
			{
				if ((this.serializing 
							&& (this._PupilsToTeachersRequests1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PupilsToTeachersRequests1;
			}
			set
			{
				this._PupilsToTeachersRequests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_User", Storage="_Users", ThisKey="gid", OtherKey="FaceGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<User> Users
		{
			get
			{
				if ((this.serializing 
							&& (this._Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PupilsToTeachersRequests(PupilsToTeachersRequest entity)
		{
			this.SendPropertyChanging();
			entity.Face = this;
		}
		
		private void detach_PupilsToTeachersRequests(PupilsToTeachersRequest entity)
		{
			this.SendPropertyChanging();
			entity.Face = null;
		}
		
		private void attach_PupilsToTeachersRequests1(PupilsToTeachersRequest entity)
		{
			this.SendPropertyChanging();
			entity.Face1 = this;
		}
		
		private void detach_PupilsToTeachersRequests1(PupilsToTeachersRequest entity)
		{
			this.SendPropertyChanging();
			entity.Face1 = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Face = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Face = null;
		}
		
		private void Initialize()
		{
			this._PupilsToTeachersRequests = new EntitySet<PupilsToTeachersRequest>(new Action<PupilsToTeachersRequest>(this.attach_PupilsToTeachersRequests), new Action<PupilsToTeachersRequest>(this.detach_PupilsToTeachersRequests));
			this._PupilsToTeachersRequests1 = new EntitySet<PupilsToTeachersRequest>(new Action<PupilsToTeachersRequest>(this.attach_PupilsToTeachersRequests1), new Action<PupilsToTeachersRequest>(this.detach_PupilsToTeachersRequests1));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Likes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Like : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _UserGID;
		
		private System.Guid _CheckPointGID;
		
		private EntityRef<CheckPoint> _CheckPoint;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnUserGIDChanging(System.Guid value);
    partial void OnUserGIDChanged();
    partial void OnCheckPointGIDChanging(System.Guid value);
    partial void OnCheckPointGIDChanged();
    #endregion
		
		public Like()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid UserGID
		{
			get
			{
				return this._UserGID;
			}
			set
			{
				if ((this._UserGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGIDChanging(value);
					this.SendPropertyChanging();
					this._UserGID = value;
					this.SendPropertyChanged("UserGID");
					this.OnUserGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckPointGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid CheckPointGID
		{
			get
			{
				return this._CheckPointGID;
			}
			set
			{
				if ((this._CheckPointGID != value))
				{
					if (this._CheckPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckPointGIDChanging(value);
					this.SendPropertyChanging();
					this._CheckPointGID = value;
					this.SendPropertyChanged("CheckPointGID");
					this.OnCheckPointGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_Like", Storage="_CheckPoint", ThisKey="CheckPointGID", OtherKey="gid", IsForeignKey=true)]
		public CheckPoint CheckPoint
		{
			get
			{
				return this._CheckPoint.Entity;
			}
			set
			{
				CheckPoint previousValue = this._CheckPoint.Entity;
				if (((previousValue != value) 
							|| (this._CheckPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckPoint.Entity = null;
						previousValue.Likes.Remove(this);
					}
					this._CheckPoint.Entity = value;
					if ((value != null))
					{
						value.Likes.Add(this);
						this._CheckPointGID = value.gid;
					}
					else
					{
						this._CheckPointGID = default(System.Guid);
					}
					this.SendPropertyChanged("CheckPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Like", Storage="_User", ThisKey="UserGID", OtherKey="gid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Likes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Likes.Add(this);
						this._UserGID = value.gid;
					}
					else
					{
						this._UserGID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CheckPoint = default(EntityRef<CheckPoint>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PupilsToTeachersRequests")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class PupilsToTeachersRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _PupilGID;
		
		private System.Guid _TeacherGID;
		
		private EntityRef<Face> _Face;
		
		private EntityRef<Face> _Face1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnPupilGIDChanging(System.Guid value);
    partial void OnPupilGIDChanged();
    partial void OnTeacherGIDChanging(System.Guid value);
    partial void OnTeacherGIDChanged();
    #endregion
		
		public PupilsToTeachersRequest()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PupilGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid PupilGID
		{
			get
			{
				return this._PupilGID;
			}
			set
			{
				if ((this._PupilGID != value))
				{
					if (this._Face1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPupilGIDChanging(value);
					this.SendPropertyChanging();
					this._PupilGID = value;
					this.SendPropertyChanged("PupilGID");
					this.OnPupilGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid TeacherGID
		{
			get
			{
				return this._TeacherGID;
			}
			set
			{
				if ((this._TeacherGID != value))
				{
					if (this._Face.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherGIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherGID = value;
					this.SendPropertyChanged("TeacherGID");
					this.OnTeacherGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_PupilsToTeachersRequest", Storage="_Face", ThisKey="TeacherGID", OtherKey="gid", IsForeignKey=true)]
		public Face Face
		{
			get
			{
				return this._Face.Entity;
			}
			set
			{
				Face previousValue = this._Face.Entity;
				if (((previousValue != value) 
							|| (this._Face.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Face.Entity = null;
						previousValue.PupilsToTeachersRequests.Remove(this);
					}
					this._Face.Entity = value;
					if ((value != null))
					{
						value.PupilsToTeachersRequests.Add(this);
						this._TeacherGID = value.gid;
					}
					else
					{
						this._TeacherGID = default(System.Guid);
					}
					this.SendPropertyChanged("Face");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_PupilsToTeachersRequest1", Storage="_Face1", ThisKey="PupilGID", OtherKey="gid", IsForeignKey=true)]
		public Face Face1
		{
			get
			{
				return this._Face1.Entity;
			}
			set
			{
				Face previousValue = this._Face1.Entity;
				if (((previousValue != value) 
							|| (this._Face1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Face1.Entity = null;
						previousValue.PupilsToTeachersRequests1.Remove(this);
					}
					this._Face1.Entity = value;
					if ((value != null))
					{
						value.PupilsToTeachersRequests1.Add(this);
						this._PupilGID = value.gid;
					}
					else
					{
						this._PupilGID = default(System.Guid);
					}
					this.SendPropertyChanged("Face1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Face = default(EntityRef<Face>);
			this._Face1 = default(EntityRef<Face>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quests")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Quest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private string _Name;
		
		private string _FullInfo;
		
		private string _ShortInfo;
		
		private string _ImagePath;
		
		private System.Nullable<System.Guid> _AuthorGID;
		
		private EntitySet<CheckPoint> _CheckPoints;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Try> _Tries;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullInfoChanging(string value);
    partial void OnFullInfoChanged();
    partial void OnShortInfoChanging(string value);
    partial void OnShortInfoChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnAuthorGIDChanging(System.Nullable<System.Guid> value);
    partial void OnAuthorGIDChanged();
    #endregion
		
		public Quest()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullInfo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string FullInfo
		{
			get
			{
				return this._FullInfo;
			}
			set
			{
				if ((this._FullInfo != value))
				{
					this.OnFullInfoChanging(value);
					this.SendPropertyChanging();
					this._FullInfo = value;
					this.SendPropertyChanged("FullInfo");
					this.OnFullInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortInfo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string ShortInfo
		{
			get
			{
				return this._ShortInfo;
			}
			set
			{
				if ((this._ShortInfo != value))
				{
					this.OnShortInfoChanging(value);
					this.SendPropertyChanging();
					this._ShortInfo = value;
					this.SendPropertyChanged("ShortInfo");
					this.OnShortInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<System.Guid> AuthorGID
		{
			get
			{
				return this._AuthorGID;
			}
			set
			{
				if ((this._AuthorGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorGIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorGID = value;
					this.SendPropertyChanged("AuthorGID");
					this.OnAuthorGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_CheckPoint", Storage="_CheckPoints", ThisKey="gid", OtherKey="QuestGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<CheckPoint> CheckPoints
		{
			get
			{
				if ((this.serializing 
							&& (this._CheckPoints.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CheckPoints;
			}
			set
			{
				this._CheckPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Comment", Storage="_Comments", ThisKey="gid", OtherKey="QuestGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Comment> Comments
		{
			get
			{
				if ((this.serializing 
							&& (this._Comments.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Try", Storage="_Tries", ThisKey="gid", OtherKey="QuestGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<Try> Tries
		{
			get
			{
				if ((this.serializing 
							&& (this._Tries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tries;
			}
			set
			{
				this._Tries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Quest", Storage="_User", ThisKey="AuthorGID", OtherKey="gid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Quests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Quests.Add(this);
						this._AuthorGID = value.gid;
					}
					else
					{
						this._AuthorGID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.Quest = this;
		}
		
		private void detach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.Quest = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Quest = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Quest = null;
		}
		
		private void attach_Tries(Try entity)
		{
			this.SendPropertyChanging();
			entity.Quest = this;
		}
		
		private void detach_Tries(Try entity)
		{
			this.SendPropertyChanging();
			entity.Quest = null;
		}
		
		private void Initialize()
		{
			this._CheckPoints = new EntitySet<CheckPoint>(new Action<CheckPoint>(this.attach_CheckPoints), new Action<CheckPoint>(this.detach_CheckPoints));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Tries = new EntitySet<Try>(new Action<Try>(this.attach_Tries), new Action<Try>(this.detach_Tries));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _gid;
		
		private string _Name;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UsersInRole", Storage="_UsersInRoles", ThisKey="gid", OtherKey="RoleGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void Initialize()
		{
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private string _Text;
		
		private int _MaxScore;
		
		private System.Guid _TaskTypeGID;
		
		private System.Guid _CheckPointGID;
		
		private System.Xml.Linq.XElement _SourceFile;
		
		private System.Nullable<System.Guid> _AuthorGID;
		
		private EntitySet<TasksToTry> _TasksToTries;
		
		private EntityRef<CheckPoint> _CheckPoint;
		
		private EntityRef<TaskType> _TaskType;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnMaxScoreChanging(int value);
    partial void OnMaxScoreChanged();
    partial void OnTaskTypeGIDChanging(System.Guid value);
    partial void OnTaskTypeGIDChanged();
    partial void OnCheckPointGIDChanging(System.Guid value);
    partial void OnCheckPointGIDChanged();
    partial void OnSourceFileChanging(System.Xml.Linq.XElement value);
    partial void OnSourceFileChanged();
    partial void OnAuthorGIDChanging(System.Nullable<System.Guid> value);
    partial void OnAuthorGIDChanged();
    #endregion
		
		public Task()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTypeGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Guid TaskTypeGID
		{
			get
			{
				return this._TaskTypeGID;
			}
			set
			{
				if ((this._TaskTypeGID != value))
				{
					if (this._TaskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskTypeGIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTypeGID = value;
					this.SendPropertyChanged("TaskTypeGID");
					this.OnTaskTypeGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckPointGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid CheckPointGID
		{
			get
			{
				return this._CheckPointGID;
			}
			set
			{
				if ((this._CheckPointGID != value))
				{
					if (this._CheckPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckPointGIDChanging(value);
					this.SendPropertyChanging();
					this._CheckPointGID = value;
					this.SendPropertyChanged("CheckPointGID");
					this.OnCheckPointGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceFile", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Xml.Linq.XElement SourceFile
		{
			get
			{
				return this._SourceFile;
			}
			set
			{
				if ((this._SourceFile != value))
				{
					this.OnSourceFileChanging(value);
					this.SendPropertyChanging();
					this._SourceFile = value;
					this.SendPropertyChanged("SourceFile");
					this.OnSourceFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<System.Guid> AuthorGID
		{
			get
			{
				return this._AuthorGID;
			}
			set
			{
				if ((this._AuthorGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorGIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorGID = value;
					this.SendPropertyChanged("AuthorGID");
					this.OnAuthorGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksToTry", Storage="_TasksToTries", ThisKey="gid", OtherKey="TaskGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<TasksToTry> TasksToTries
		{
			get
			{
				if ((this.serializing 
							&& (this._TasksToTries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TasksToTries;
			}
			set
			{
				this._TasksToTries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPoint_Task", Storage="_CheckPoint", ThisKey="CheckPointGID", OtherKey="gid", IsForeignKey=true)]
		public CheckPoint CheckPoint
		{
			get
			{
				return this._CheckPoint.Entity;
			}
			set
			{
				CheckPoint previousValue = this._CheckPoint.Entity;
				if (((previousValue != value) 
							|| (this._CheckPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckPoint.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._CheckPoint.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._CheckPointGID = value.gid;
					}
					else
					{
						this._CheckPointGID = default(System.Guid);
					}
					this.SendPropertyChanged("CheckPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_TaskType", ThisKey="TaskTypeGID", OtherKey="gid", IsForeignKey=true)]
		public TaskType TaskType
		{
			get
			{
				return this._TaskType.Entity;
			}
			set
			{
				TaskType previousValue = this._TaskType.Entity;
				if (((previousValue != value) 
							|| (this._TaskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskType.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskType.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._TaskTypeGID = value.gid;
					}
					else
					{
						this._TaskTypeGID = default(System.Guid);
					}
					this.SendPropertyChanged("TaskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_User", ThisKey="AuthorGID", OtherKey="gid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._AuthorGID = value.gid;
					}
					else
					{
						this._AuthorGID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TasksToTries(TasksToTry entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TasksToTries(TasksToTry entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void Initialize()
		{
			this._TasksToTries = new EntitySet<TasksToTry>(new Action<TasksToTry>(this.attach_TasksToTries), new Action<TasksToTry>(this.detach_TasksToTries));
			this._CheckPoint = default(EntityRef<CheckPoint>);
			this._TaskType = default(EntityRef<TaskType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TasksToTries")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TasksToTry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _TaskGID;
		
		private System.Guid _CheckPointToTryGID;
		
		private int _EarnedScore;
		
		private long _ElapsedTime;
		
		private System.DateTime _Date;
		
		private EntityRef<CheckPointsToTry> _CheckPointsToTry;
		
		private EntityRef<Task> _Task;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnTaskGIDChanging(System.Guid value);
    partial void OnTaskGIDChanged();
    partial void OnCheckPointToTryGIDChanging(System.Guid value);
    partial void OnCheckPointToTryGIDChanged();
    partial void OnEarnedScoreChanging(int value);
    partial void OnEarnedScoreChanged();
    partial void OnElapsedTimeChanging(long value);
    partial void OnElapsedTimeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public TasksToTry()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid TaskGID
		{
			get
			{
				return this._TaskGID;
			}
			set
			{
				if ((this._TaskGID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskGIDChanging(value);
					this.SendPropertyChanging();
					this._TaskGID = value;
					this.SendPropertyChanged("TaskGID");
					this.OnTaskGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckPointToTryGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid CheckPointToTryGID
		{
			get
			{
				return this._CheckPointToTryGID;
			}
			set
			{
				if ((this._CheckPointToTryGID != value))
				{
					if (this._CheckPointsToTry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckPointToTryGIDChanging(value);
					this.SendPropertyChanging();
					this._CheckPointToTryGID = value;
					this.SendPropertyChanged("CheckPointToTryGID");
					this.OnCheckPointToTryGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarnedScore", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int EarnedScore
		{
			get
			{
				return this._EarnedScore;
			}
			set
			{
				if ((this._EarnedScore != value))
				{
					this.OnEarnedScoreChanging(value);
					this.SendPropertyChanging();
					this._EarnedScore = value;
					this.SendPropertyChanged("EarnedScore");
					this.OnEarnedScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElapsedTime", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public long ElapsedTime
		{
			get
			{
				return this._ElapsedTime;
			}
			set
			{
				if ((this._ElapsedTime != value))
				{
					this.OnElapsedTimeChanging(value);
					this.SendPropertyChanging();
					this._ElapsedTime = value;
					this.SendPropertyChanged("ElapsedTime");
					this.OnElapsedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CheckPointsToTry_TasksToTry", Storage="_CheckPointsToTry", ThisKey="CheckPointToTryGID", OtherKey="gid", IsForeignKey=true)]
		public CheckPointsToTry CheckPointsToTry
		{
			get
			{
				return this._CheckPointsToTry.Entity;
			}
			set
			{
				CheckPointsToTry previousValue = this._CheckPointsToTry.Entity;
				if (((previousValue != value) 
							|| (this._CheckPointsToTry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CheckPointsToTry.Entity = null;
						previousValue.TasksToTries.Remove(this);
					}
					this._CheckPointsToTry.Entity = value;
					if ((value != null))
					{
						value.TasksToTries.Add(this);
						this._CheckPointToTryGID = value.gid;
					}
					else
					{
						this._CheckPointToTryGID = default(System.Guid);
					}
					this.SendPropertyChanged("CheckPointsToTry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TasksToTry", Storage="_Task", ThisKey="TaskGID", OtherKey="gid", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TasksToTries.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TasksToTries.Add(this);
						this._TaskGID = value.gid;
					}
					else
					{
						this._TaskGID = default(System.Guid);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CheckPointsToTry = default(EntityRef<CheckPointsToTry>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTypes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _gid;
		
		private string _Name;
		
		private EntitySet<Task> _Tasks;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TaskType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_Tasks", ThisKey="gid", OtherKey="TaskTypeGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = null;
		}
		
		private void Initialize()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherRequests")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TeacherRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _gid;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MiddleName;
		
		private string _Institution;
		
		private string _City;
		
		private string _Telephone;
		
		private string _E_Mail;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnInstitutionChanging(string value);
    partial void OnInstitutionChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnE_MailChanging(string value);
    partial void OnE_MailChanged();
    #endregion
		
		public TeacherRequest()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Institution", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Institution
		{
			get
			{
				return this._Institution;
			}
			set
			{
				if ((this._Institution != value))
				{
					this.OnInstitutionChanging(value);
					this.SendPropertyChanging();
					this._Institution = value;
					this.SendPropertyChanged("Institution");
					this.OnInstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(250)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-Mail]", Storage="_E_Mail", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public string E_Mail
		{
			get
			{
				return this._E_Mail;
			}
			set
			{
				if ((this._E_Mail != value))
				{
					this.OnE_MailChanging(value);
					this.SendPropertyChanging();
					this._E_Mail = value;
					this.SendPropertyChanged("E_Mail");
					this.OnE_MailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tries")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Try : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private System.Guid _QuestGID;
		
		private System.Guid _UserGID;
		
		private System.Nullable<bool> _IsSuccessful;
		
		private EntitySet<CheckPointsToTry> _CheckPointsToTries;
		
		private EntityRef<Quest> _Quest;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnQuestGIDChanging(System.Guid value);
    partial void OnQuestGIDChanged();
    partial void OnUserGIDChanging(System.Guid value);
    partial void OnUserGIDChanged();
    partial void OnIsSuccessfulChanging(System.Nullable<bool> value);
    partial void OnIsSuccessfulChanged();
    #endregion
		
		public Try()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid QuestGID
		{
			get
			{
				return this._QuestGID;
			}
			set
			{
				if ((this._QuestGID != value))
				{
					if (this._Quest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestGIDChanging(value);
					this.SendPropertyChanging();
					this._QuestGID = value;
					this.SendPropertyChanged("QuestGID");
					this.OnQuestGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGID", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid UserGID
		{
			get
			{
				return this._UserGID;
			}
			set
			{
				if ((this._UserGID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGIDChanging(value);
					this.SendPropertyChanging();
					this._UserGID = value;
					this.SendPropertyChanged("UserGID");
					this.OnUserGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSuccessful", DbType="Bit")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<bool> IsSuccessful
		{
			get
			{
				return this._IsSuccessful;
			}
			set
			{
				if ((this._IsSuccessful != value))
				{
					this.OnIsSuccessfulChanging(value);
					this.SendPropertyChanging();
					this._IsSuccessful = value;
					this.SendPropertyChanged("IsSuccessful");
					this.OnIsSuccessfulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Try_CheckPointsToTry", Storage="_CheckPointsToTries", ThisKey="gid", OtherKey="TryGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<CheckPointsToTry> CheckPointsToTries
		{
			get
			{
				if ((this.serializing 
							&& (this._CheckPointsToTries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CheckPointsToTries;
			}
			set
			{
				this._CheckPointsToTries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Try", Storage="_Quest", ThisKey="QuestGID", OtherKey="gid", IsForeignKey=true)]
		public Quest Quest
		{
			get
			{
				return this._Quest.Entity;
			}
			set
			{
				Quest previousValue = this._Quest.Entity;
				if (((previousValue != value) 
							|| (this._Quest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quest.Entity = null;
						previousValue.Tries.Remove(this);
					}
					this._Quest.Entity = value;
					if ((value != null))
					{
						value.Tries.Add(this);
						this._QuestGID = value.gid;
					}
					else
					{
						this._QuestGID = default(System.Guid);
					}
					this.SendPropertyChanged("Quest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Try", Storage="_User", ThisKey="UserGID", OtherKey="gid", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tries.Add(this);
						this._UserGID = value.gid;
					}
					else
					{
						this._UserGID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckPointsToTries(CheckPointsToTry entity)
		{
			this.SendPropertyChanging();
			entity.Try = this;
		}
		
		private void detach_CheckPointsToTries(CheckPointsToTry entity)
		{
			this.SendPropertyChanging();
			entity.Try = null;
		}
		
		private void Initialize()
		{
			this._CheckPointsToTries = new EntitySet<CheckPointsToTry>(new Action<CheckPointsToTry>(this.attach_CheckPointsToTries), new Action<CheckPointsToTry>(this.detach_CheckPointsToTries));
			this._Quest = default(EntityRef<Quest>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Guid _gid;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<int> _PasswordFormat;
		
		private string _PasswordSalt;
		
		private System.Nullable<System.Guid> _FaceGID;
		
		private string _SocialName;
		
		private EntitySet<CheckPoint> _CheckPoints;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
		private EntitySet<Like> _Likes;
		
		private EntitySet<Quest> _Quests;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Try> _Tries;
		
		private EntityRef<Face> _Face;
		
		private bool serializing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(System.Nullable<int> value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnFaceGIDChanging(System.Nullable<System.Guid> value);
    partial void OnFaceGIDChanged();
    partial void OnSocialNameChanging(string value);
    partial void OnSocialNameChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaceGID", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<System.Guid> FaceGID
		{
			get
			{
				return this._FaceGID;
			}
			set
			{
				if ((this._FaceGID != value))
				{
					if (this._Face.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFaceGIDChanging(value);
					this.SendPropertyChanging();
					this._FaceGID = value;
					this.SendPropertyChanged("FaceGID");
					this.OnFaceGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialName", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public string SocialName
		{
			get
			{
				return this._SocialName;
			}
			set
			{
				if ((this._SocialName != value))
				{
					this.OnSocialNameChanging(value);
					this.SendPropertyChanging();
					this._SocialName = value;
					this.SendPropertyChanged("SocialName");
					this.OnSocialNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CheckPoint", Storage="_CheckPoints", ThisKey="gid", OtherKey="AuthorGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<CheckPoint> CheckPoints
		{
			get
			{
				if ((this.serializing 
							&& (this._CheckPoints.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CheckPoints;
			}
			set
			{
				this._CheckPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersInRole", Storage="_UsersInRoles", ThisKey="gid", OtherKey="UserGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Like", Storage="_Likes", ThisKey="gid", OtherKey="UserGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<Like> Likes
		{
			get
			{
				if ((this.serializing 
							&& (this._Likes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Likes;
			}
			set
			{
				this._Likes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Quest", Storage="_Quests", ThisKey="gid", OtherKey="AuthorGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<Quest> Quests
		{
			get
			{
				if ((this.serializing 
							&& (this._Quests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Quests;
			}
			set
			{
				this._Quests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_Tasks", ThisKey="gid", OtherKey="AuthorGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<Task> Tasks
		{
			get
			{
				if ((this.serializing 
							&& (this._Tasks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Try", Storage="_Tries", ThisKey="gid", OtherKey="UserGID")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<Try> Tries
		{
			get
			{
				if ((this.serializing 
							&& (this._Tries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Tries;
			}
			set
			{
				this._Tries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Face_User", Storage="_Face", ThisKey="FaceGID", OtherKey="gid", IsForeignKey=true, DeleteRule="CASCADE")]
		public Face Face
		{
			get
			{
				return this._Face.Entity;
			}
			set
			{
				Face previousValue = this._Face.Entity;
				if (((previousValue != value) 
							|| (this._Face.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Face.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Face.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._FaceGID = value.gid;
					}
					else
					{
						this._FaceGID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Face");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CheckPoints(CheckPoint entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Likes(Like entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Quests(Quest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Quests(Quest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tries(Try entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tries(Try entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void Initialize()
		{
			this._CheckPoints = new EntitySet<CheckPoint>(new Action<CheckPoint>(this.attach_CheckPoints), new Action<CheckPoint>(this.detach_CheckPoints));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			this._Likes = new EntitySet<Like>(new Action<Like>(this.attach_Likes), new Action<Like>(this.detach_Likes));
			this._Quests = new EntitySet<Quest>(new Action<Quest>(this.attach_Quests), new Action<Quest>(this.detach_Quests));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Tries = new EntitySet<Try>(new Action<Try>(this.attach_Tries), new Action<Try>(this.detach_Tries));
			this._Face = default(EntityRef<Face>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FAQ")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FAQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _gid;
		
		private string _Question;
		
		private string _Answer;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngidChanging(System.Guid value);
    partial void OngidChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public FAQ()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid gid
		{
			get
			{
				return this._gid;
			}
			set
			{
				if ((this._gid != value))
				{
					this.OngidChanging(value);
					this.SendPropertyChanging();
					this._gid = value;
					this.SendPropertyChanged("gid");
					this.OngidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
